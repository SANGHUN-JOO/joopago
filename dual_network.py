# -*- coding: utf-8 -*-
"""dual_network.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mrmw3bnKXuKtphDwPc5aI-SYzuPKvOHj
"""

from tensorflow.keras.layers import Activation, Add, BatchNormalization, Conv2D, Dense, GlobalAveragePooling2D, Input
from tensorflow.keras.models import Model
from tensorflow.keras.regularizers import l2
from tensorflow.keras import backend as K
from pathlib import Path
import os

import go

DN_FILTERS = 64 # original = 256
DN_RESIDUAL_NUM = 9 # original = 19
DN_INPUT_SHAPE = (go.N, go.N, 9) # original = (go.N, go.N, 17)
DN_OUTPUT_SIZE = (go.N * go.N) + 1

def conv(filters):
    return Conv2D(filters, 3, padding='same', use_bias=False,
                  kernel_initializer='he_normal', kernel_regularizer=l2(0.0005))

def conv_size_one(filters):
    return Conv2D(filters, 1, padding='same', use_bias=False,
                  kernel_initializer='he_normal', kernel_regularizer=l2(0.0005))

def residual_block():
    def f(x):
        sc = x
        x = conv(DN_FILTERS)(x)
        x = BatchNormalization()(x)
        x = Activation('relu')(x)
        x = conv(DN_FILTERS)(x)
        x = BatchNormalization()(x)
        x = Add()([x, sc])
        x = Activation('relu')(x)
        return x
    return f

def dual_network():

    cur_dir = str(Path(__file__).parent.absolute())
    #print(cur_dir)
    
    if os.path.exists(cur_dir + '\\model\\best.h5'):
        return
    
    input = Input(shape=DN_INPUT_SHAPE)

    x = conv(DN_FILTERS)(input)
    x = BatchNormalization()(x)
    x = Activation('relu')(x)

    for i in range(DN_RESIDUAL_NUM):
        x = residual_block()(x)
    

    p = conv_size_one(2)(x)
    p = BatchNormalization()(p)
    p = Activation('relu')(p)

    p = GlobalAveragePooling2D()(p)

    p = Dense(DN_OUTPUT_SIZE, kernel_regularizer=l2(0.0005),
              activation='softmax', name='pi')(p)

    v = conv_size_one(1)(x)
    v = BatchNormalization()(v)
    v = Activation('relu')(v)

    v = GlobalAveragePooling2D()(v)

    v = Dense(1, kernel_regularizer=l2(0.0005))(v)
    v = Activation('tanh', name='v')(v)

    model = Model(inputs=input, outputs=[p, v])

    os.makedirs(cur_dir + '\\model', exist_ok=True)
    model.save(cur_dir + '\\model\\best.h5')

    K.clear_session()
    del model

if __name__ == '__main__':
    dual_network()